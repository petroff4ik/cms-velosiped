<?class tree_model extends add_model_module {	function return_menu($p_id=1, $side="", $lang) {		if (!ROOT_TREE_TITLE_SHOW)			$root_tree_tiitle = "AND node1.level=(b.level+1)";		else			$root_tree_tiitle = "AND (node1.level=(b.level+1) OR node1.level=0)";		$sql = "SELECT  node1.side,node1.templates_int,lang.text,node1.id, node1.name,node1.level,node1.adress,node1.module,node1.func_name,node1.alias,node1.short_a,node1.max_short_aFROM ns_tree AS node1, ns_tree AS parent1,  id_lang_text AS lang ,(SELECT node.id, node.level FROM ns_tree AS node, ns_tree AS parent WHERE     node.lft <= parent.lft     AND      node.rgt >= parent.rgt      AND      parent.id ='$p_id') AS bWHERE node1.lft BETWEEN parent1.lft AND parent1.rgt AND parent1.id =b.id " . $root_tree_tiitle . " AND node1.alias=lang.id AND lang.lang='$lang' and node1.show_me=1 ORDER BY node1.lft;";		return $this->db->result_array($this->db->query($sql));	}	function return_cat($arg="", $arg1="") {		switch ($arg) {			case"all": {					$tmp = $this->db->result_array($this->db->query("SELECT node.template_out,id_lang_text.text,node.func_name,node.module,node.id, node.name, node.level,node.show_meFROM ns_tree AS parent,ns_tree AS node LEFT JOIN id_lang_text ON  id_lang_text.id=node.alias AND id_lang_text.lang='" . $GLOBALS['lang'] . "'WHERE node.lft BETWEEN parent.lft AND parent.rgtAND parent.id = 1group by node.id ORDER BY node.lft ;"));				}break;			case"cat": {					$tmp = $this->db->result_array($this->db->query("SELECT id_lang_text.text,node.id, node.name, node.level,node.show_meFROM ns_tree AS parent,ns_tree AS node LEFT JOIN id_lang_text ON  id_lang_text.id=node.alias AND id_lang_text.lang='" . $GLOBALS['lang'] . "'WHERE node.lft BETWEEN parent.lft AND parent.rgtAND parent.id ='$arg1'group by node.id ORDER BY node.lft;"));				}break;			case"cat!": {					$tmp = $this->db->result_array($this->db->query("SELECT id_lang_text.text,node.id, node.name, node.level,node.show_me,node.lft,node.rgt FROM  ns_tree  AS parent,ns_tree AS node LEFT JOIN id_lang_text ON id_lang_text.id=node.alias AND id_lang_text.lang='" . $GLOBALS['lang'] . "' WHERE node.lft BETWEEN parent.lft AND parent.rgt AND parent.id=1 AND node.id NOT IN(SELECT noden.id as idn FROM ns_tree as noden,ns_tree as parentn WHERE parentn.id='" . $arg1 . "' AND noden.lft BETWEEN parentn.lft AND parentn.rgt)  ORDER BY node.lft"));				}break;			default:break;		}		return $tmp;	}	function cleanAI($table) {		$this->db->query("TRUNCATE `" . $table . "`;");	}	function emptyTable($table) {		$res = $this->db->row_array($this->db->query("SELECT Count(*) as count FROM " . $table . ";"));		return $res['count'];	}	function add_in($id, $name, $show_me=true, $adress="", $side="left", $data) {		if (isset($data['max_short_a']))			$data['max_short_a'] = 1;		if (isset($data['short_a']))			$data['short_a'] = 1;		if (!$this->emptyTable("ns_tree"))			$this->cleanAI("ns_tree");		$last = $this->db->row_array($this->db->query("SELECT MAX(id) FROM id_lang_text;"));		$last['MAX(id)']++;		foreach ($data['lang'] as $key => $value) {			$this->db->query("INSERT INTO id_lang_text SET id=" . $last['MAX(id)'] . ",text='" . $value . "',lang='" . $key . "',date='" . date("y-m-d") . "';");		}		$module = $this->db->row_array($this->return_info_model2($data['mod']));		if ($data['oper'] == "add") {			$level = $this->get_info("level", "ns_tree", "id", $id);			$level++;			if (empty($id)){			$this->db->query("BEGIN;");			$this->db->query("INSERT INTO ns_tree SET name='$name', lft=1, rgt=2, level=0,show_me='$show_me',adress='$adress',side='$side',alias='" . $last['MAX(id)'] . "',module='" . $module['class'] . "',func_name='" . $module['name'] . "',template_out='" . $data['template_out'] . "',templates_int='" . $data['templates_int'] . "',max_short_a='" . $data['max_short_a'] . "',short_a='" . $data['short_a'] . "';", true);			}else{			$this->db->query("BEGIN;");			$this->db->query("SELECT @treeRight := rgt FROM ns_tree WHERE id = '$id';UPDATE ns_tree SET rgt = rgt + 2 WHERE rgt >= @treeRight;UPDATE ns_tree SET lft = lft + 2 WHERE lft > @treeRight;INSERT INTO ns_tree SET name='$name', lft=@treeRight , rgt=@treeRight+1 , level='$level',show_me='$show_me',adress='$adress',side='$side',alias='" . $last['MAX(id)'] . "',module='" . $module['class'] . "',func_name='" . $module['name'] . "',template_out='" . $data['template_out'] . "',templates_int='" . $data['templates_int'] . "',max_short_a='" . $data['max_short_a'] . "',short_a='" . $data['short_a'] . "';", true);			$module['lastid'] = mysql_insert_id();			$this->db->query("COMMIT;");			}		}else {			$level = $this->get_info("level", "ns_tree", "id", $id);			$this->db->query("BEGIN;");			$this->db->query("SELECT @treeRight := rgt FROM ns_tree WHERE id = '$id';UPDATE ns_tree SET rgt = rgt + 2 WHERE rgt > @treeRight;UPDATE ns_tree SET lft = lft + 2 WHERE lft > @treeRight;INSERT INTO ns_tree SET name='$name',  lft=@treeRight + 1, rgt=@treeRight + 2, level='$level',show_me='$show_me',adress='$adress',side='$side',alias='" . $last['MAX(id)'] . "',module='" . $module['class'] . "',func_name='" . $module['name'] . "',template_out='" . $data['template_out'] . "',templates_int='" . $data['templates_int'] . "',max_short_a='" . $data['max_short_a'] . "',short_a='" . $data['short_a'] . "';", true);			$module['lastid'] = mysql_insert_id();			$this->db->query("COMMIT;");		}		return $module;	}	function return_info_model2($arg) {		return $this->db->query("SELECT * From modules WHERE id='$arg'ORDER BY id;");	}	function return_info_model_by_class($arg) {		// return $this->db->result_array($this->db->query("SELECT * From modules,side_module WHERE class='".$arg."' AND ;"));	}	function get_info_ns_tree($id="") {		if (empty($id)) {			return $this->db->row_array($this->db->query("SELECT * FROM ns_tree WHERE lft=0 and id=1;"));		} else {			return $this->db->row_array($this->db->query("SELECT * FROM ns_tree WHERE id=$id;")); //не использовался		}	}	function get_info_ns_tree_by_name($name) {		return $this->db->row_array($this->db->query("SELECT * FROM ns_tree WHERE name='" . $name . "';"));	}	function returnSideForFatherId($fid) {		return $this->db->result_array($this->db->query("SELECT side_site.* FROM side_site,ns_tree WHERE ns_tree.template_out=side_site.id_template AND ns_tree.id='" . $fid . "'"));	}	function returnTemplates($id="") {		if (empty($id)) {			return $this->db->row_array($this->db->query("SELECT side_site.*,templates.* FROM templates,side_site WHERE templates.show_me=1 AND templates.id=side_site.id_template"));		} else {			if (is_numeric($id))				return $this->db->result_array($this->db->query("SELECT side_site.*,templates.* FROM templates,side_site WHERE templates.id='" . $id . "' AND templates.id=side_site.id_template"));			else				return $this->db->result_array($this->db->query("SELECT side_site.*,templates.* FROM templates,side_site WHERE templates.name='" . $id . "' AND templates.id=side_site.id_template"));		}	}	function getAllTemplates() {		return $this->db->result_array($this->db->query("SELECT templates.* FROM templates"));	}	function returnSideForModules($class, $oper, $id_template) {		return $this->db->result_array($this->db->query("SELECT side_module.* FROM side_module,side_site WHERE side_module.side=side_site.side AND side_site.id_template=side_module.id_template  AND  side_module.id_template='" . $id_template . "' AND side_module.id='" . $class . $oper . "' AND side_site.free=1;"));	}	function returnSideForTree($id_template) {		return $this->db->result_array($this->db->query("SELECT ns_tree.* FROM ns_tree,side_site WHERE ns_tree.side=side_site.side AND side_site.id_template='" . $id_template . "' AND  ns_tree.template_out='" . $id_template . "'  AND side_site.free=1 AND ns_tree.show_me=1;"));	}	function returnSideForDoc($id) {		return $this->db->result_array($this->db->query("SELECT * From side_site WHERE id_template=( SELECT template_out From ns_tree,ns_doc WHERE ns_tree.id=ns_doc.father_id AND ns_doc.id=" . $id . ")"));	}	function returnSideForEvent($name, $id_template) {		return $this->db->result_array($this->db->query("SELECT side_module.* FROM side_module,side_site WHERE side_module.side=side_site.side AND side_module.id='" . $name . "_ev' AND side_site.id_template=side_module.id_template AND side_module.id_template='" . $id_template . "' AND side_site.free=1;"));	}	function returnCurSideForDoc() {		return $this->db->row_array($this->db->query("SELECT ns_doc.side_for_doc From ns_doc WHERE ns_doc.id=" . $id . ";"));	}	function save_ns_tree($id, $idAlias, $postArray) {		if (isset($postArray['max_short_a']))			$postArray['max_short_a'] = 1;		if (isset($postArray['short_a']))			$postArray['short_a'] = 1;		$this->db->query("START TRANSACTION;");		$results = $this->db->query("UPDATE ns_tree SET name='" . $this->security($postArray['add_in'], "+") . "', show_me='" . $postArray['show'] . "',adress='" . $this->security($postArray['adress'], "+") . "',side='" . $postArray['side'] . "',module='" . $postArray['module'] . "',func_name='" . $this->get_info("name", "modules", "class", $postArray['module']) . "',template_out=" . $postArray['template_out'] . ",templates_int='" . $this->security($postArray['templates_int'], "+") . "',max_short_a='" . $postArray['max_short_a'] . "',short_a='" . $postArray['short_a'] . "' WHERE id='$id'");		foreach ($postArray as $key => $value) {			$results+=$this->db->query("UPDATE id_lang_text SET text='" . $value . "' WHERE lang='" . $key . "' AND id='$idAlias';");		}		$this->db->query("COMMIT;");		return $results;	}	function returnAllTree() {		return $this->db->result_array($this->db->query("SELECT id_lang_text.*,ns_tree.* FROM id_lang_text,ns_tree WHERE id_lang_text.id=ns_tree.alias AND id_lang_text.lang='" . $GLOBALS['lang'] . "'; "));	}	function returnAllModule() {		return $this->db->result_array($this->db->query("SELECT * FROM modules;"));	}	function moveNstree($idm, $idt, $type) {		$level = $this->db->row_array($this->db->query("SELECT level, lft, rgt FROM ns_tree WHERE id = $idm "));		$level_up = $this->db->row_array($this->db->query("SELECT level FROM ns_tree WHERE id = $idt"));		switch ($type) {			case("pos"): {					$keyNear = $this->db->row_array($this->db->query("SELECT lft, rgt FROM ns_tree WHERE id = $idt"));					$skew_level = $level_up['level'] - $level['level'];				}break;			case("mov"): {					$keyNear = $this->db->row_array($this->db->query("SELECT (rgt - 1) AS rgt FROM ns_tree WHERE id =  $idt"));					$skew_level = $level_up['level'] - $level['level'] + 1;				}break;		}		$skew_tree = $level['rgt'] - $level['lft'] + 1;		$id_edit = $this->db->row_array($this->db->query("SELECT id FROM ns_tree WHERE lft >= " . $level['lft'] . " AND rgt <= " . $level['rgt'] . ";"));		if ($level['rgt'] > $keyNear['rgt']) {			$skew_edit = $keyNear['rgt'] - $level['lft'] + 1;			$res = $this->db->query("UPDATE ns_tree SET rgt = IF(lft >= " . $level['lft'] . ", rgt + " . $skew_edit . ", IF(rgt < " . $level['lft'] . ", rgt + " . $skew_tree . ", rgt)), level = IF(lft >= " . $level['lft'] . ", level + " . $skew_level . ", level), lft = IF(lft >= " . $level['lft'] . ", lft + " . $skew_edit . ", IF(lft > " . $keyNear['rgt'] . ", lft + " . $skew_tree . ", lft))WHERE rgt > " . $keyNear['rgt'] . " AND lft < " . $level['rgt'] . ";");		} else {			$skew_edit = $keyNear['rgt'] - $level['lft'] + 1 - $skew_tree;			$res = $this->db->query("UPDATE ns_treeSET lft = IF(rgt <= " . $level['rgt'] . ", lft + " . $skew_edit . ", IF(lft > " . $level['rgt'] . ", lft - " . $skew_tree . ", lft)),level = IF(rgt <= " . $level['rgt'] . ", level + " . $skew_level . ", level),rgt = IF(rgt <= " . $level['rgt'] . ", rgt + " . $skew_edit . ", IF(rgt <= " . $keyNear['rgt'] . ", rgt - " . $skew_tree . ", rgt))WHERE rgt > " . $level['lft'] . " AND lft <= " . $keyNear['rgt'] . ";");		}		return $res;	}}?>