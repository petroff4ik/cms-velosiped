<?/** * @author PetrOFF <andi-fm@ya.ru> *  * @package Api * @category Api * Feature is available in modules and the core */class api extends error {    protected $path;    protected $view;    protected $model;    protected $config;    protected $db;    protected $lang;    protected $side;    protected $url;    protected $start_time;    protected $template;    protected $moduleCurent;    protected $cache;    protected $cache_path;    //vesrion 1.0.2_d    protected function security($string="", $method=0, $c=SECURITY_LEN_STRING) {        if (empty($method)) {            if ($string == "POST" || $string == "post") {                foreach ($_POST as $key => $value)                    if (!is_array($_POST[$key]))                        $_POST[$key] = mb_substr(trim($value), 0, $c, "UTF-8");                return $_POST;            }else {                if ($string == "GET" || $string == "get") {                    foreach ($_GET as $key => $value)                        if (!is_array($_GET[$key]))                            $_GET[$key] = mb_substr(trim($value), 0, $c, "UTF-8");                    return $_POST;                }            }        }        if (is_array($string))            return false;        if ($string[0] == "_")            return false;        $string = mb_substr(trim($string), 0, $c, "UTF-8");        switch ($method) {            case 1:                $flag = preg_match("|^[a-zA-Z0-9]+$|", $string); //aA-zZ,0-9                break;            case 2:                $flag = preg_match("|^[a-zA-Z]+$|", $string); //aA-zZ                break;            case 3:                $flag = preg_match("|^[0-9]+$|", $string); //0-9                break;            case 4:                $flag = preg_match("/^[a-z\d]+[a-z\d-_.]*@([a-z\d]+.)*[a-z]{2,4}$/i", $string); //mail                break;            case 5:                $flag = preg_match("[[:alpha:]]+://", $string); //www                break;            case 6:                $flag = preg_match("/^[\.a-zA-ZА-Яа-яЁё0-9_-]+$/u", $string); //aA-zZ,0-9,_,-,.                break;            default:                return $string;        }        if ($flag == true)            return $string;        else            return false;    }    function _access() {        if ($_SESSION['type'] == "member" && $_SESSION['user']['level'] >= LEVEL_ACCESS_ADMINPANEL) {            return true;        } else {            return false;        }    }    protected function analysis_url($base_url, $url) {        $tmp = parse_url($base_url);        if ($tmp['path'] != "/") {            $url = str_replace($tmp['path'], "", $url);        }        return $url;    }    function sessionStart() {        ini_set('url_rewriter.tags', 'none');        session_cache_expire(60 * 60 * 24 * 7);        session_start();        $expiry = 60 * 60 * 24 * 100;        setcookie(session_name(), session_id(), time() + $expiry, "/");    }    protected function _load_module($module) {        static $object = array();        if (isset($object[$module])) {            return $object[$module];        } else {            if (strstr($module, "model")) {   //model                $tmp = explode("_", $module);                $module_name = $module;                $module = $tmp[0];                if (file_exists(SITE_DIR . "modules/" . $module . "/" . $module . "_model.class.php")) {                    require_once SITE_DIR . "modules/" . $module . "/" . $module . "_model.class.php";                    $object[$module_name] = new $module_name($this->db);                    return $object[$module_name];                } else {                    $this->show_404();                }            } else {  //contrl                if (file_exists(SITE_DIR . "modules/" . $module . "/" . $module . ".class.php")) {                    require_once SITE_DIR . "modules/" . $module . "/" . $module . ".class.php";                    $object[$module] = new $module($this->db, $this->view, $module, $this->lang);                    return $object[$module];                } else {                    $this->show_404();                }            }        }    }    protected function _call_out_func() {        $tmp = func_get_args();        $class = $tmp[0];        $func = $tmp[1];        return call_user_func_array(array($this->_load_module($class), $func), array_slice($tmp, 2));    }    function _call_out_func_arr($model_name, $method, $param, $num=0) {        return call_user_func_array(array($this->_load_module($model_name), $method), array_slice($param, $num));    }    protected function set_message($res, $oper="") {        switch ($oper) {            case("add"): {                    @$_SESSION['message'].=$res;                }break;            default: {                    if (empty($res))                        $_SESSION['message'] = $this->lang['er_sys'];                    else                        $_SESSION['message'] = $this->lang['ok'];                };                break;        }    }    protected function relink($arg="") {        //HTTP_REFERER        if (empty($arg)) {            if (empty($_SERVER['HTTP_REFERER']) || !isset($_SERVER['HTTP_REFERER'])) {                $this->set_message($this->lang['error_relink'], "add");                header("location: /" . ADMIN_DIR);            } else {                header("location: " . $_SERVER['HTTP_REFERER']);            }        } elseif (is_array($arg)) {            //hidenn  input            if (isset($arg['relink'])) {                header("location: /" . ADMIN_DIR . $arg['relink']);            } else {                $this->set_message($this->lang['error_relink_input'], "add");                header("location: /" . ADMIN_DIR);            }        } else {            //relink arg            header("location: " . $arg);        }    }    protected function relinkF($arg="") {        //HTTP_REFERER        if (empty($arg)) {            if (empty($_SERVER['HTTP_REFERER']) || !isset($_SERVER['HTTP_REFERER'])) {                $this->set_message($this->lang['error_relink'], "add");                header("location: " . SITE_URL);            } else {                header("location: " . $_SERVER['HTTP_REFERER']);            }        } elseif (is_array($arg)) {            //hidenn  input            if (isset($arg['relink'])) {                header("location: " . SITE_URL . $arg['relink']);            } else {                $this->set_message($this->lang['error_relink_input'], "add");                header("location: " . SITE_URL);            }        } else {            //relink arg            header("location: " . $arg);        }    }    protected function set_messageF($res, $oper="") {        $this->sessionStart();        switch ($oper) {            case("add"): {                    @$_SESSION['messageF'].=$res;                }break;            case("arr"): {                    @$_SESSION['messageF'] = $res;                }break;            default: {                    if (empty($res))                        $_SESSION['messageF'] = $this->lang['message']['er_sys'];                    else                        $_SESSION['messageF'] = $this->lang['message']['ok'];                };                break;        }    }    protected function write_log($text, $file="error.log") {        if (!file_exists(LOG_DIR . $file)) {            echo $this->lang['l_notfoundlog'];            return;        }        $fp = fopen(LOG_DIR . $file, 'a');        flock($fp, LOCK_EX); // Блокирование файла для записи        fwrite($fp, $text);        flock($fp, LOCK_UN); // Снятие блокировки        fclose($fp);    }    protected function read_log($file="error.log") {        if (!file_exists(LOG_DIR . $file)) {            return $this->lang['l_notfoundlog'];            ;        }        return file_get_contents(LOG_DIR . $file);    }    protected function getIP() {        if (isset($_SERVER['HTTP_X_REAL_IP']))            return $_SERVER['HTTP_X_REAL_IP'];        return $_SERVER['REMOTE_ADDR'];    }    protected function write_file($data="", $file="") {        $fp = fopen(SITE_DIR . $file, 'w');        flock($fp, LOCK_EX); // Блокирование файла для записи        fwrite($fp, $data);        flock($fp, LOCK_UN); // Снятие блокировки        fclose($fp);        return $fp;    }    // end SYstem_info---------------    // time bechmark-----------    protected function start_time() {        $this->start_time = $this->get_time();    }    protected function end_time() {        return $this->get_time() - $this->start_time;    }    protected function get_time() {        list($usec, $sec) = explode(" ", microtime());        return ((float) $usec + (float) $sec);    }    // end time-----------------    // side control-------------    function route($uri) {        if (!empty($this->routes))            foreach ($this->routes as $key => $value) {                $key = str_replace(':any', '.+', str_replace(':num', '[0-9]+', $key));                if (preg_match('#^' . $key . '$#', $uri)) {                    if (strpos($value, '$') !== FALSE AND strpos($key, '(') !== FALSE) {                        return preg_replace('#^' . $key . '$#', $value, $uri);                    }                }            }        return $uri;    }}?>